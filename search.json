[{"path":"https://ecologyr.github.io/BlueCarbon/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 BlueCarbon authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://ecologyr.github.io/BlueCarbon/articles/Tutorial.html","id":"load-example-data","dir":"Articles","previous_headings":"","what":"Load example data","title":"Tutorial","text":"first dataframe (core_comp) field measurement data use estimate soil compaction core collection. second dataframe (bluecarbon_data) core field information laboratory data use correct core compaction, estimate organic carbon content sample organic matter content, estimate organic carbon stocks sequestration rates. core field information laboratory data includes: sampling site, core ID, blue carbon ecosystem, dominant species, core compaction percentage, sample minimum depth, sample maximum depth, dry bulk density, organic matter content (available) organic carbon content sample age.","code":""},{"path":"https://ecologyr.github.io/BlueCarbon/articles/Tutorial.html","id":"core-compaction-estimation","dir":"Articles","previous_headings":"","what":"Core compaction estimation","title":"Tutorial","text":"Many field methods extract soil cores can lead compaction material retrieved (e.g. manual percussion).  compaction percentage can estimated knowing difference original surface level soil surface level soil withing sampler core insertion retrieval. got warning one core, core Sm_03_04, removed final dataframe, missing data. can look core example data see data missing. case, core Sm_03_04 didn’t data three variables needed. first 10 rows resulting dataframe, including column core compaction percentages.","code":"compaction <- estimate_compaction(core_comp,                                   core = \"core\",                                   sampler_length = \"sampler_length\",                                   internal_distance = \"internal_distance\",                                   external_distance = \"external_distance\") #> Warning in estimate_compaction(core_comp, core = \"core\", sampler_length = #> \"sampler_length\", : Removing cores with missing data: Sm_03_04 core_comp[core_comp$core==\"Sm_03_04\",] #>        core sampler_length internal_distance external_distance #> 30 Sm_03_04             NA                NA                NA head(compaction, n = 10) #>        core sampler_length internal_distance external_distance compaction #> 1  Sg_01_01            200                35                25   5.714286 #> 2  Sg_01_02            200                45                35   6.060606 #> 3  Sg_01_03            200                86                76   8.064516 #> 4  Sg_02_01            200                10                 0   5.000000 #> 5  Sg_02_02            200                60                50   6.666667 #> 6  Sg_02_03            200                78                68   7.575758 #> 7  Sg_03_01            200                52                42   6.329114 #> 8  Sg_03_02            200                 1                 1   0.000000 #> 9  Sg_03_03            200                98                78  16.393443 #> 10 Sg_04_01            200                21                 1  10.050251"},{"path":"https://ecologyr.github.io/BlueCarbon/articles/Tutorial.html","id":"decompact-cores","dir":"Articles","previous_headings":"","what":"Decompact cores","title":"Tutorial","text":"Core compaction affect final stock core. However, affect depth core samples. stocks given known soil depth (e.g. first meter) able compare among areas, depth samples needed properly estimate final stock. use function decompact() estimate decompacted minimum maximum depth sample stock estimation. Furthermore, compaction reduces volume samples, dry bulk density corrected. can done estimating corrected volume : multiplying corrected thickness sample (corrected maximum depth - corrected minimum depth) area core; , compacted dry bulk density provided, function decompact() correct . provide compacted dry bulk density name column specified function parameter “dbd” , default, parameter NULL function assumes provided. decompact() 6 parameters: “df”: data.frame core properties “core”: (character) Name column id core sample belongs “compaction”: (character) Name column core compaction PERCENTAGE, calculated estimate_compaction(). “mind”: (character) Name column minimum depth sample (depth top sample) “maxd”: (character) Name column maximum depth sample (depth bottom sample) “dbd”: (character) Name column dry bulk density don’t need specify name columns example data names default names function. need specify dry bulk density column name default argument NULL. warning given list cores compaction percentage data. function assumes cores compacted field sets compaction zero. first 10 rows final dataframe, corrected minimum maximum sample depth dry bulk density.","code":"bluecarbon_decompact <- decompact(bluecarbon_data, dbd = \"dbd\") #> Warning in decompact(bluecarbon_data, dbd = \"dbd\"): Setting compaction = 0 for #> these cores: Sm_03_04, Sg_10_02, Sg_11_03, Sm_05_01, Sm_06_01 head(bluecarbon_decompact, n = 10) |>    kable()"},{"path":"https://ecologyr.github.io/BlueCarbon/articles/Tutorial.html","id":"estimation-of-organic-carbon-from-organic-matter","dir":"Articles","previous_headings":"","what":"Estimation of organic carbon from organic matter","title":"Tutorial","text":"well-known linear relation organic matter content organic carbon soils. correlation can change ecosystems sampling sites due changes organic matter composition among factors. Therefore, recommended estimate correlation batch samples. estimate_oc() estimates content organic carbon samples organic carbon values (may organic matter values). Estimation organic carbon done means linear regressions log(organic carbon) ~ log(organic matter). function returns organic carbon value organic matter value provided. value organic carbon sample returns value; otherwise, estimates organic carbon model fitted site, model fitted species, else model fitted ecosystem. samples build reliable model model fit poor,estimate_oc() uses equations Fourqurean et al. (2012) seagrasses, Maxwell et al. (2023) salt marshes Piñeiro-Juncal (prep.) mangroves estimate organic carbon. unlikely, possible, model predicts higher organic carbon organic matter content. possible nature, function give warning recommended discard model. Fourqureanet al. (2012) Seagrass ecosystems globally significant carbon stock. Nat. Geosci.5, 505–509. https://doi.org/10.1038/ngeo1477 Maxwell et al. (2023) Global dataset soil organic carbon tidal marshes.Sci.Data 10, 1–14.https://doi.org/10.1038/s41597-023-02633-x Piñeiro-Juncal et al. (prep) Soil organic carbon preservation decay trends tidal marsh, mangrove seagrass blue carbon ecosystems. function estimate_oc() 7 parameters: “df”: tibble data.frame containing data. Must least five columns (see arguments ). “core”: (character) Name column id core sample belongs “site”: (character) Name column reporting sample site. “ecosystem”: (character) Name column reporting ecosystem type. apply published equations OC estimation, ecosystem names either “Salt Marsh”, “Seagrass” “Mangrove”. “species”: (character) Name column reporting main species site. “om”: (character) Name column reporting organic matter values. “oc”: (character) Name column reporting organic carbon values. don’t need specify name columns example data names default names.  estimate_oc() function produces plot showing relationship organic matter organic carbon content, provide warnings samples organic matter contents outside percentage organic carbon samples used estimate models. function returns list two elements: [1] original dataframe three new columns estimated organic carbon, standard error estimate, type model used estimate organic carbon value sample; [2] list models estimated, inspection.","code":"oc_out <- estimate_oc(bluecarbon_decompact) #> Warning in estimate_oc(bluecarbon_decompact): The following cores had samples #> with organic carbon values below the organic carbon range used to built the #> model: Sg_04_01, Sm_04_03, Sm_04_04, Sm_05_01 #> Warning in estimate_oc(bluecarbon_decompact): The following cores had samples #> with organic carbon values above the organic carbon range used to built the #> model: Sg_04_01, Sm_03_01, Sm_04_02, Sm_04_03, Sm_04_04, Sm_05_01 head(oc_out[[1]]) |>    kable() head(oc_out[[2]], n = 2) #> $Mangrove #> $Mangrove$ecosystem_model #> NULL #>  #> $Mangrove$multispecies_model #> NULL #>  #> $Mangrove$site_models #> NULL #>  #>  #> $`Salt Marsh` #> $`Salt Marsh`$ecosystem_model #>  #> Call: #> stats::lm(formula = log(oc_r) ~ log(om_r), data = df) #>  #> Coefficients: #> (Intercept)    log(om_r)   #>      -1.667        1.077   #>  #>  #> $`Salt Marsh`$multispecies_model #>  #> Call: #> stats::lm(formula = log(oc_r) ~ log(om_r) * species_r, data = df) #>  #> Coefficients: #>                          (Intercept)                             log(om_r)   #>                              -1.9154                                1.1678   #>           species_rSpartina maritima  log(om_r):species_rSpartina maritima   #>                               1.0662                               -0.4614   #>  #>  #> $`Salt Marsh`$site_models #> $`Salt Marsh`$site_models$Sm_01 #>  #> Call: #> stats::lm(formula = log(oc_r) ~ log(om_r), data = df) #>  #> Coefficients: #> (Intercept)    log(om_r)   #>     -0.8492       0.7064   #>  #>  #> $`Salt Marsh`$site_models$Sm_02 #>  #> Call: #> stats::lm(formula = log(oc_r) ~ log(om_r), data = df) #>  #> Coefficients: #> (Intercept)    log(om_r)   #>      -2.281        1.484   #>  #>  #> $`Salt Marsh`$site_models$Sm_03 #>  #> Call: #> stats::lm(formula = log(oc_r) ~ log(om_r), data = df) #>  #> Coefficients: #> (Intercept)    log(om_r)   #>      -1.892        1.121"},{"path":"https://ecologyr.github.io/BlueCarbon/articles/Tutorial.html","id":"estimation-of-organic-carbon-stocks-at-1m-and-75-cm-depth","dir":"Articles","previous_headings":"","what":"Estimation of organic carbon stocks at 1m and 75 cm depth","title":"Tutorial","text":"organic carbon stock accumulated organic carbon mass provided depth per unit area. default depth function estimate_oc_stock() 100. depth samples provided cm (example data) correspond 1 meter. core reach desired depth (standardization depth), extrapolates stock depth linear model accumulated mass organic carbon depth. organic carbon mass sample estimated : OC=DBD*(OCp/100)*h (Equation 1) DBD dry bulk density, OCp organic carbon content percentage h thickness sample (maximum depth sample - minimum depth sample). common analyze selected samples core reduce workload analytic costs. Therefore, necessary estimate organic carbon mass spaces samples estimate accumulated organic carbon mass. function estimate_h() distributes empty spaces adjacent samples. allows account different sample thickness different spacing samples. , organic carbon mass sample estimated following equation 1 corrected sample thickness. function estimate_h() already incorporated within functions estimate_oc_stock(), test_extrapolation() estimate_seq_rate(), need run beforehand. function estimate_oc_stock() 7 parameters: “df”: data.frame core (core id), mind (minimum depth sample), maxd (maximum depth sample), dbd (dry bulk density), oc (organic carbon %) “depth”: Numeric Maximum depth estimate stock, default 100. “core”: Character Name column reporting core ID. “mind”: Character Name column reporting minimum depth sample. “maxd”: Character Name column reporting maximum depth sample. “dbd”: Character Name column reporting dry bulk density. “oc”: Character Name column reporting organic carbon concentrations. used output estimate_oc() estimate organic carbon stock per cm2 1m depth. column names estimate_oc() output default names estimate_oc_stock() don’t need specify . Furthermore, default depth 100, data cm don’t need specify depth (.e. estimate carbon stock 1m depth). output function dataframe 5 columns. first column core ID. second column (stockwc) carbon stock whole core. third column maximum depth core. fourth column stock standardization depth. Finally, core didn’t reach standardization depth, get value fifth column standard error accumulated mass-depth model used estimate stock. stock units mass/area depth (length). actual units depend provided original dataframe. example data (bluecarbon_data), carbon mass g area cm-2 (dry bulk density g/cm-3) depth 100 cm, minimum maximum depth samples cm. units estimated carbon stock case g/cm-2 top 100 cm. estimate stock depth different 100 cm, specify parameter “depth”. example, estimate carbon stock 75 cm:","code":"stocks <- estimate_oc_stock(oc_out[[1]]) head(stocks, n=10) #>        core    stockwc      maxd     stock    stock_se #> 1  Sg_01_01 2.62947377 156.96970 1.8551331          NA #> 2  Sg_01_02 2.37997169  78.34839 2.9938578 0.092740541 #> 3  Sg_01_03 2.08002346  99.63509 2.1763784 0.069382436 #> 4  Sg_02_01 2.06631095 124.21053 1.6774846          NA #> 5  Sg_02_02 0.06798487  23.14286 0.3099306 0.015373325 #> 6  Sg_02_03 0.93076430  55.82951 1.6394040 0.055765031 #> 7  Sg_03_01 0.17284439  48.04054 0.3532540 0.007802834 #> 8  Sg_03_02 0.19106567  35.80000 0.5485867 0.021102396 #> 9  Sg_03_03 0.17326199  60.76078 0.3048915 0.021924873 #> 10 Sg_04_01 0.97516409  95.60894 1.1414566 0.055859866 stocks75 <- estimate_oc_stock(oc_out[[1]], depth = 75) head(stocks75, n = 10) #>        core    stockwc      maxd     stock    stock_se #> 1  Sg_01_01 2.62947377 156.96970 1.5957092          NA #> 2  Sg_01_02 2.37997169  78.34839 2.2059969          NA #> 3  Sg_01_03 2.08002346  99.63509 1.7547894          NA #> 4  Sg_02_01 2.06631095 124.21053 1.3186908          NA #> 5  Sg_02_02 0.06798487  23.14286 0.2306065 0.011009091 #> 6  Sg_02_03 0.93076430  55.82951 1.2240241 0.038709351 #> 7  Sg_03_01 0.17284439  48.04054 0.2721119 0.005376076 #> 8  Sg_03_02 0.19106567  35.80000 0.4083799 0.014856354 #> 9  Sg_03_03 0.17326199  60.76078 0.2292955 0.015143971 #> 10 Sg_04_01 0.97516409  95.60894 0.9352101          NA"},{"path":"https://ecologyr.github.io/BlueCarbon/articles/Tutorial.html","id":"test-stock-extrapolation","dir":"Articles","previous_headings":"","what":"Test stock extrapolation","title":"Tutorial","text":"function (test_extrapolation()) can visualize amount error may introduced extrapolating carbon stocks short cores deeper standardization depth. function uses cores reach desired depth test error estimated carbon stock modeled 90, 75, 50 25% depth. provide error cores modeled function estimate_oc_stock() function models cores reach desired length. function subsets cores reach desired depth, estimates stock (observed stock), estimate stock linear relation organic carbon accumulated mass depth using 90, 75, 50 25% length indicated desired depth, compares observed stock estimated stocks extrapolation. function requires cores reach desired depth. function test_extrapolation() 7 parameters: “df”: data.frame core (core id), mind (minimum depth sample), maxd (maximum depth sample), dbd (dry bulk density), oc (organic carbon %) “depth”: Numeric Maximum depth estimate stock, default 100. “core”: Character Name column reporting core ID. “mind”: Character Name column reporting minimum depth sample. “maxd”: Character Name column reporting maximum depth sample. “dbd”: Character Name column reporting dry bulk density. “oc”: Character Name column reporting organic carbon concentrations. estimate_oc_stock() example, used output estimate_oc() estimate organic carbon stock per cm2 1m depth. column names estimate_oc() output default names estimate_oc_stock() don’t need specify . Furthermore, default depth 100, data cm don’t need specify depth.  function returns dataframe observed extrapolated stocks, two plots. first plot (left) shows deviation extrapolated stock observed stock, percentage observed stock. second plot (right) shows distribution extrapolated observed stocks. diagonal line indicate stocks equal. line, extrapolated stock overestimated; line, extrapolated stock underestimated. can done different depth. Like example estimate_oc_stock() use 75 modifying parameter “depth”.","code":"stocks_test <- test_extrapolation(oc_out[[1]]) #> Warning: Removed 4 rows containing non-finite outside the scale range #> (`stat_boxplot()`). #> Warning: Removed 4 rows containing missing values or values outside the scale range #> (`geom_point()`). #> Warning: Removed 1 row containing missing values or values outside the scale range #> (`geom_point()`). #> Warning: Removed 3 rows containing missing values or values outside the scale range #> (`geom_point()`). stocks_test <- test_extrapolation(oc_out[[1]], depth = 75) #> Warning: Removed 5 rows containing non-finite outside the scale range #> (`stat_boxplot()`). #> Warning: Removed 5 rows containing missing values or values outside the scale range #> (`geom_point()`). #> Warning: Removed 1 row containing missing values or values outside the scale range #> (`geom_point()`). #> Warning: Removed 4 rows containing missing values or values outside the scale range #> (`geom_point()`)."},{"path":"https://ecologyr.github.io/BlueCarbon/articles/Tutorial.html","id":"estimate-soil-organic-carbon-sequestration-rates","dir":"Articles","previous_headings":"","what":"Estimate soil organic carbon sequestration rates","title":"Tutorial","text":"depositional environments, like seagrass meadows, salt marshes mangroves forests, possible estimate sediment accretion rate cores, long sedimentary record mixed. estimate_seq_rate() estimates organic carbon sequestration rates cores coherent age-depth model. information model included age sample column dataframe (column “age” example dataframe). function select samples age data delete without. Estimations organic carbon sequestration rates depend balance organic matter burial degradation. Therefore, longer time frame used estimate average sequestration rate, lower estimated sequestration rate. able compare among cores, sequestration rates must standardized time frame. function estimate_seq_rate() estimates average carbon sequestration rates known time frame (100 default) summing carbon stocks age-depth dividing time frame. timeframe always refers last period time (last 100, last 1000, etc…) estimate_seq_rate() 8 parameters: “df”: data.frame , least, columns: core, mind (minimum depth sample), maxd (maximum depth sample), dbd (dry bulk density), oc (organic carbon %), age (age sample obtained age-depth age-accumulated mass model) “timeframe”: Numeric Standardization time frame, default 100 years “core”: Character Name column reporting core ID. “mind”: Character Name column reporting minimum depth sample. “maxd”: Character Name column reporting maximum depth sample. “dbd”: Character Name column reporting dry bulk density. “oc”: Character Name column reporting organic carbon concentrations. “age”: Character Name column reporting age sample. use output estimate_oc() estimate organic carbon sequestration rate per cm2 last 100 years. column names estimate_oc() output default names estimate_seq_rate() don’t need specify . Furthermore, default time frame 100. output function dataframe 4 columns. first column core ID. second column average sequestration rate whole core. third column maximum age core. fourth column sequestration rate provided time frame. sequestration rates units mass/area time (last xxx units time). units provided dataframe. example data, mass g area cm-2 (dry bulk density g/cm-3) times years, age samples years. , sequestration rates units example g/cm-2 yr-1 last 100 years. estimate organic carbon sequestration rate different timeframe 100, specify parameter “timeframe”.","code":"seq_rate <- estimate_seq_rate(oc_out[[1]]) head(seq_rate, n=10) #>        core  seq_rate_wc  maxage     seq_rate #> 1  Sg_01_01 0.0020180152 1303.00 0.0043626875 #> 2  Sg_02_01 0.0005423388 3810.00 0.0027556600 #> 3  Sg_03_01 0.0001068260 1618.00 0.0002322665 #> 4  Sg_05_01 0.0023649409  422.00 0.0022770729 #> 5  Mg_01_01 0.0024467131  990.00 0.0040171986 #> 6  Sm_01_01 0.0009239537 1247.00 0.0012018703 #> 7  Sm_02_01 0.0003773279 3096.00 0.0013587956 #> 8  Sm_03_01 0.0012985371  592.00 0.0025806030 #> 9  Sg_06_01 0.0080307101  164.15 0.0069686883 #> 10 Sg_06_02 0.0021769458  776.50 0.0045876577 seq_rate_200 <- estimate_seq_rate(oc_out[[1]], timeframe = 200) #> Core Sg_06_01 is younger than the time frame provided #> Core Sm_07_01 is younger than the time frame provided #> Core Mg_02_01 is younger than the time frame provided head(seq_rate_200, n=10) #>        core  seq_rate_wc  maxage     seq_rate #> 1  Sg_01_01 0.0020180152 1303.00 0.0036333524 #> 2  Sg_02_01 0.0005423388 3810.00 0.0017522040 #> 3  Sg_03_01 0.0001068260 1618.00 0.0001802125 #> 4  Sg_05_01 0.0023649409  422.00 0.0024636800 #> 5  Mg_01_01 0.0024467131  990.00 0.0027250712 #> 6  Sm_01_01 0.0009239537 1247.00 0.0010274819 #> 7  Sm_02_01 0.0003773279 3096.00 0.0007817402 #> 8  Sm_03_01 0.0012985371  592.00 0.0015549084 #> 9  Sg_06_01 0.0080307101  164.15           NA #> 10 Sg_06_02 0.0021769458  776.50 0.0037439774"},{"path":"https://ecologyr.github.io/BlueCarbon/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Nerea Piñeiro-Juncal. Author, maintainer, copyright holder. Julen Astigarraga. Author. Valentina Costa. Author. Marcio Martins. Author. Francisco Rodriguez-Sanchez. Author.","code":""},{"path":"https://ecologyr.github.io/BlueCarbon/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Piñeiro-Juncal N, Astigarraga J, Costa V, Martins M, Rodriguez-Sanchez F (2025). BlueCarbon: Estimation Organic Carbon Stocks Sequestration Rates Soil Core Data. R package version 0.1.0, https://EcologyR.github.io/BlueCarbon/, https://github.com/EcologyR/BlueCarbon.","code":"@Manual{,   title = {BlueCarbon: Estimation of Organic Carbon Stocks and Sequestration Rates From Soil Core Data},   author = {Nerea Piñeiro-Juncal and Julen Astigarraga and Valentina Costa and Marcio Martins and Francisco Rodriguez-Sanchez},   year = {2025},   url = {https://github.com/EcologyR/BlueCarbon},   note = {R package version 0.1.0, https://EcologyR.github.io/BlueCarbon/}, }"},{"path":"https://ecologyr.github.io/BlueCarbon/index.html","id":"bluecarbon","dir":"","previous_headings":"","what":"Estimation of Organic Carbon Stocks and Sequestration Rates from Soil Core Data","title":"Estimation of Organic Carbon Stocks and Sequestration Rates from Soil Core Data","text":"goal BlueCarbon facilitate estimation organic carbon stocks sequestration rates soil/sediment cores blue carbon ecosystems. contains seven main functions deal core compaction (estimate correct compaction cores sampling), transform laboratory data (estimate sample thickness estimate organic carbon content organic matter content) estimate organic carbon stocks sequestration rates (estimate organic carbon stocks sequestration rates visualize error stock extrapolation). BlueCarbon library workflow","code":""},{"path":"https://ecologyr.github.io/BlueCarbon/index.html","id":"estimate_compaction---estimate-core-compaction","dir":"","previous_headings":"","what":"estimate_compaction - Estimate Core Compaction","title":"Estimation of Organic Carbon Stocks and Sequestration Rates from Soil Core Data","text":"Sampling soil cores manual percussion usually leads compaction material retrieved. function estimate percentage compaction measurements taken field inserting corer tube extracting : length corer tube (sampler_length), distance surface soil top tube outside (external_distance) distance surface soil top tube inside tube (internal_distance). Soil compaction field sampling","code":""},{"path":"https://ecologyr.github.io/BlueCarbon/index.html","id":"decompact---calculate-sediment-properties-after-decompaction","dir":"","previous_headings":"","what":"decompact - Calculate sediment properties after decompaction","title":"Estimation of Organic Carbon Stocks and Sequestration Rates from Soil Core Data","text":"Core compaction derived field extraction can mathematically corrected estimate original depth samples. function apply linear correction (core material assumed compacted equally) correct sample depth , provided, dry bulk density.","code":""},{"path":"https://ecologyr.github.io/BlueCarbon/index.html","id":"estimate_oc---organic-carbon-content-estimation-from-organic-carbon-data","dir":"","previous_headings":"","what":"estimate_oc - Organic carbon content estimation from organic carbon data","title":"Estimation of Organic Carbon Stocks and Sequestration Rates from Soil Core Data","text":"Typically relationship organic carbon organic matter content can modelled linear regression model. relationship can change ecosystems sampling sites due changes organic matter composition among factors. function (estimate_oc()) fits linear model organic matter organic carbon content samples estimate content organic carbon samples lacking values. estimation organic carbon done means linear regressions log(organic carbon) ~ log(organic matter). value organic carbon sample returns value; otherwise, estimates organic carbon model fitted site, model fitted species, else model fitted ecosystem. samples build reliable model model fit poor,estimate_oc() uses equations Fourqurean et al. (2012) seagrasses, Maxwell et al. (2023) salt marshes Piñeiro-Juncal (prep.) mangroves estimate organic carbon. unlikely, possible, model predicts higher organic carbon organic matter content. possible nature, function give warning recommended discard model.","code":""},{"path":"https://ecologyr.github.io/BlueCarbon/index.html","id":"estimate_h---sample-thickness-estimation","dir":"","previous_headings":"","what":"estimate_h - Sample thickness estimation","title":"Estimation of Organic Carbon Stocks and Sequestration Rates from Soil Core Data","text":"cores selected samples measured necessary assign carbon density empty spaces estimate total stock. function (estimate_h()) checks gaps samples , , divides space previous next sample return sample thickness without gaps core. middle point one sample estimated bottom previous sample top next sample, middle point one sample middle part next, unequally distribute gaps samples samples different thickness. stock sequestration rate estimation functions (estimate_oc_stock() estimate_seq_rate()) function incorporated necessary run beforehand. Gap distribution samples estimate accumulated organic carbon mass.","code":""},{"path":"https://ecologyr.github.io/BlueCarbon/index.html","id":"estimate_oc_stock---organic-carbon-stock-estimation","dir":"","previous_headings":"","what":"estimate_oc_stock - Organic carbon stock estimation","title":"Estimation of Organic Carbon Stocks and Sequestration Rates from Soil Core Data","text":"Estimates carbon stocks soil core data specified depth, 100 cm default. core reach desired depth, extrapolates stock linear model accumulated mass organic carbon depth. OC stock estimation diagram","code":""},{"path":"https://ecologyr.github.io/BlueCarbon/index.html","id":"test_extrapolation---visualize-the-error-of-stock-extrapolation","dir":"","previous_headings":"","what":"test_extrapolation - Visualize the error of stock extrapolation","title":"Estimation of Organic Carbon Stocks and Sequestration Rates from Soil Core Data","text":"function subset cores reach desired depth, estimates stock (observed stock), estimates stock linear relation organic carbon accumulated mass depth using 90, 75, 50 25% top length indicated desired depth, compares observed stock estimated stocks extrapolation. function requires cores reach desired depth.","code":""},{"path":"https://ecologyr.github.io/BlueCarbon/index.html","id":"estimate_seq_rate---organic-carbon-sequestration-rates-estimation","dir":"","previous_headings":"","what":"estimate_seq_rate - Organic carbon sequestration rates estimation","title":"Estimation of Organic Carbon Stocks and Sequestration Rates from Soil Core Data","text":"Estimate average organic carbon sequestration rate soil given time frame (default last 100 years) organic carbon concentration age samples.","code":""},{"path":"https://ecologyr.github.io/BlueCarbon/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Estimation of Organic Carbon Stocks and Sequestration Rates from Soil Core Data","text":"BlueCarbon can installed directly GitHub: R-universe:","code":"# install.packages(\"remotes\") remotes::install_github(\"EcologyR/BlueCarbon\") install.packages(\"BlueCarbon\", repos = c(\"https://pakillo.r-universe.dev\", \"https://cloud.r-project.org\"))"},{"path":"https://ecologyr.github.io/BlueCarbon/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Estimation of Organic Carbon Stocks and Sequestration Rates from Soil Core Data","text":"using package, please cite :","code":"citation(\"BlueCarbon\") To cite package 'BlueCarbon' in publications use:    Piñeiro-Juncal N, Astigarraga J, Costa V, Martins M,   Rodriguez-Sanchez F (2025). _BlueCarbon: Estimation of Organic Carbon   Stocks and Sequestration Rates From Soil Core Data_. R package   version 0.1.0, https://EcologyR.github.io/BlueCarbon/,   <https://github.com/EcologyR/BlueCarbon>.  A BibTeX entry for LaTeX users is    @Manual{,     title = {BlueCarbon: Estimation of Organic Carbon Stocks and Sequestration Rates From Soil Core Data},     author = {Nerea Piñeiro-Juncal and Julen Astigarraga and Valentina Costa and Marcio Martins and Francisco Rodriguez-Sanchez},     year = {2025},     url = {https://github.com/EcologyR/BlueCarbon},     note = {R package version 0.1.0, https://EcologyR.github.io/BlueCarbon/},   }"},{"path":"https://ecologyr.github.io/BlueCarbon/index.html","id":"funding","dir":"","previous_headings":"","what":"Funding","title":"Estimation of Organic Carbon Stocks and Sequestration Rates from Soil Core Data","text":"development software funded Fondo Europeo de Desarrollo Regional (FEDER) Consejería de Transformación Económica, Industria, Conocimiento y Universidades Junta de Andalucía (proyecto US-1381388 led Francisco Rodríguez Sánchez, Universidad de Sevilla). NPJ supported Juan de la Cierva fellowship (JDC2022-048342-). JA acknowledges funding CLIMB-FOREST Horizon Europe Project (101059888) funded European Union.","code":""},{"path":"https://ecologyr.github.io/BlueCarbon/reference/BlueCarbon-package.html","id":null,"dir":"Reference","previous_headings":"","what":"BlueCarbon: Estimation of Organic Carbon Stocks and Sequestration Rates from Soil Core Data — BlueCarbon-package","title":"BlueCarbon: Estimation of Organic Carbon Stocks and Sequestration Rates from Soil Core Data — BlueCarbon-package","text":"Tools estimate soil organic carbon stocks sequestration rates blue carbon ecosystems. BlueCarbon contains functions estimate correct core compaction, estimate sample thickness, estimate organic carbon content organic matter content, estimate organic carbon stocks sequestration rates, visualize error carbon stock extrapolation.","code":""},{"path":[]},{"path":"https://ecologyr.github.io/BlueCarbon/reference/BlueCarbon-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"BlueCarbon: Estimation of Organic Carbon Stocks and Sequestration Rates from Soil Core Data — BlueCarbon-package","text":"Maintainer: Nerea Piñeiro-Juncal nerea.pineiro.juncal@uvigo.gal (ORCID) [copyright holder] Authors: Julen Astigarraga (ORCID) Valentina Costa (ORCID) Marcio Martins (ORCID) Francisco Rodriguez-Sanchez (ORCID)","code":""},{"path":"https://ecologyr.github.io/BlueCarbon/reference/bluecarbon_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Dataframe containing geochemical data from blue carbon soil cores — bluecarbon_data","title":"Dataframe containing geochemical data from blue carbon soil cores — bluecarbon_data","text":"Example dataset geochemical data seagrass, salt marsh mangroves soil cores. contain real data. variables needed estimate organic carbon stocks fluxes included. Different cores provided, one , samples core grouped together ordered sample closer soil surface deepest. four ID columns: 'site', 'core', 'ecosystem' 'species'. 'site' refers ID given sampling location core. 'core' Id individual core (replicate cores site IDs different cores IDs). 'ecosystem' refers type ecosystem core collected. 'species' identifies type vegetation sampling area. Species either name species code referring mixture different species (e.g. \"Low\", meaning dominant species usually found low marsh areas). 'compaction' indicates percentage compression suffered core retrieval. Minimum maximum depths ('mind' 'maxd') depth top bottom sample core respectively. Dry bulk density ('dbd') dry weight sample divided volume occupied core (compression correction). 'om' 'oc' percentage organic matter organic carbon sample. 'age' refers age sample top core age 0. Ages samples estimated age-depth models.","code":""},{"path":"https://ecologyr.github.io/BlueCarbon/reference/bluecarbon_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dataframe containing geochemical data from blue carbon soil cores — bluecarbon_data","text":"","code":"bluecarbon_data"},{"path":[]},{"path":"https://ecologyr.github.io/BlueCarbon/reference/bluecarbon_data.html","id":"bluecarbon-data","dir":"Reference","previous_headings":"","what":"bluecarbon_data","title":"Dataframe containing geochemical data from blue carbon soil cores — bluecarbon_data","text":"data frame 1719 rows 11 columns: site character column id sampling locatios core character column id core ecosystem character column name ecosystem, \"seagrass\", \"salt marsh\" \"mangrove\" species character column main species ecosystem type compaction numbers 0 100 mind number column upper depth sample maxd number column lower depth sample dbd number column dry bulk density values, mass/volumen om number column percentage organic matter, numbers 0 100 oc number column percentage organic carbon, numbers 0 100 age number column age sample, years sampling, positive numbers","code":""},{"path":"https://ecologyr.github.io/BlueCarbon/reference/bluecarbon_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Dataframe containing geochemical data from blue carbon soil cores — bluecarbon_data","text":"data cores collected authors anonymized modified cover different cases may occur using package. longer represents existing dataset.","code":""},{"path":"https://ecologyr.github.io/BlueCarbon/reference/core_comp.html","id":null,"dir":"Reference","previous_headings":"","what":"Dataframe containing field measurements of soil cores to estimate compaction caused by core collection. — core_comp","title":"Dataframe containing field measurements of soil cores to estimate compaction caused by core collection. — core_comp","text":"Example dataset field measurements cores collected percussion. variables needed estimate core compaction included. 'core' ID bluecarbon_data. 'sampler_length' length tube sampler introduced soil top bottom. 'internal_distance' refers distance top sampler surface soil within sampler (depth lower surface soil outside). 'external_distance' refers distance top sampler surface soil outside sampler. reference used \"top sampler\" three measurements. Internal external distances measured sampler insertion soil extraction.","code":""},{"path":"https://ecologyr.github.io/BlueCarbon/reference/core_comp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dataframe containing field measurements of soil cores to estimate compaction caused by core collection. — core_comp","text":"","code":"core_comp"},{"path":[]},{"path":"https://ecologyr.github.io/BlueCarbon/reference/core_comp.html","id":"core-comp","dir":"Reference","previous_headings":"","what":"core_comp","title":"Dataframe containing field measurements of soil cores to estimate compaction caused by core collection. — core_comp","text":"data frame 78 rows 4 columns: core character column id core sampler_length numeric column length sampler/tube used extract core internal_distance numeric column distance top sampler/tube surface sediment inside sampler/tube finishing inserting soil extracting external_distance numeric column distance top sampler/tube surface sediment outside sampler/tube finishing inserting soil extracting ","code":""},{"path":"https://ecologyr.github.io/BlueCarbon/reference/core_comp.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Dataframe containing field measurements of soil cores to estimate compaction caused by core collection. — core_comp","text":"made data","code":""},{"path":"https://ecologyr.github.io/BlueCarbon/reference/decompact.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate sediment properties after decompaction — decompact","title":"Calculate sediment properties after decompaction — decompact","text":"Accepts data.frame sample properties compaction estimations returns modified version sample properties corrected compaction","code":""},{"path":"https://ecologyr.github.io/BlueCarbon/reference/decompact.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate sediment properties after decompaction — decompact","text":"","code":"decompact(   df = NULL,   core = \"core\",   compaction = \"compaction\",   mind = \"mind\",   maxd = \"maxd\",   dbd = NULL )"},{"path":"https://ecologyr.github.io/BlueCarbon/reference/decompact.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate sediment properties after decompaction — decompact","text":"df Data.frame core properties core Character Name column id core sample belongs compaction Character Name column core compaction PERCENTAGE, calculated estimate_compaction(). mind Character Name column minimum depth sample (depth top sample) maxd Character Name column maximum depth sample (depth bottom sample) dbd Character Name column dry bulk density","code":""},{"path":"https://ecologyr.github.io/BlueCarbon/reference/decompact.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate sediment properties after decompaction — decompact","text":"initial data.frame addition two columns corrected minimum maximum depth samples (additionally, dry bulk density column specified, return another column corrected dry bulk density)","code":""},{"path":"https://ecologyr.github.io/BlueCarbon/reference/decompact.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate sediment properties after decompaction — decompact","text":"","code":"decompact(bluecarbon_data) |>   head() #> Warning: Setting compaction = 0 for these cores: Sm_03_04, Sg_10_02, Sg_11_03, Sm_05_01, Sm_06_01 #>    site     core ecosystem            species compaction mind maxd       dbd #> 1 Sg_01 Sg_01_01  Seagrass Posidonia oceanica   5.714286    0    1 0.7352912 #> 2 Sg_01 Sg_01_01  Seagrass Posidonia oceanica   5.714286    1    2 0.9754336 #> 3 Sg_01 Sg_01_01  Seagrass Posidonia oceanica   5.714286    2    3 0.8698411 #> 4 Sg_01 Sg_01_01  Seagrass Posidonia oceanica   5.714286    3    4 1.0272564 #> 5 Sg_01 Sg_01_01  Seagrass Posidonia oceanica   5.714286    4    5 0.9307887 #> 6 Sg_01 Sg_01_01  Seagrass Posidonia oceanica   5.714286    5    6 1.4696196 #>         om oc age mind_corrected maxd_corrected #> 1 6.554329 NA   8       0.000000       1.060606 #> 2       NA NA  13       1.060606       2.121212 #> 3 7.382634 NA  15       2.121212       3.181818 #> 4       NA NA  22       3.181818       4.242424 #> 5 8.026646 NA  29       4.242424       5.303030 #> 6       NA NA  35       5.303030       6.363636"},{"path":"https://ecologyr.github.io/BlueCarbon/reference/estimate_compaction.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate Core Compaction — estimate_compaction","title":"Estimate Core Compaction — estimate_compaction","text":"Estimates percentage core compaction using measurements data.frame containing core properties. computes correction factor based sampler tube length, internal distance, external distance, adds 'compaction' column input data.frame calculated compaction rate percentage.","code":""},{"path":"https://ecologyr.github.io/BlueCarbon/reference/estimate_compaction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate Core Compaction — estimate_compaction","text":"","code":"estimate_compaction(   df = NULL,   core = \"core\",   sampler_length = \"sampler_length\",   internal_distance = \"internal_distance\",   external_distance = \"external_distance\" )"},{"path":"https://ecologyr.github.io/BlueCarbon/reference/estimate_compaction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate Core Compaction — estimate_compaction","text":"df data.frame containing core properties. core Character Name column identifying core. sampler_length Character Name column total length sampler tube. internal_distance Character Name column distance sampler top core surface. external_distance Character Name column distance sampler top sediment surface.","code":""},{"path":"https://ecologyr.github.io/BlueCarbon/reference/estimate_compaction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate Core Compaction — estimate_compaction","text":"Returns input data.frame additional 'compaction' column indicating estimated percentage core compaction.","code":""},{"path":"https://ecologyr.github.io/BlueCarbon/reference/estimate_compaction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate Core Compaction — estimate_compaction","text":"","code":"df <- estimate_compaction(   core_comp,   core = \"core\",   sampler_length = \"sampler_length\",   internal_distance = \"internal_distance\",   external_distance = \"external_distance\" ) #> Warning: Removing cores with missing data: Sm_03_04 head(df) #>       core sampler_length internal_distance external_distance compaction #> 1 Sg_01_01            200                35                25   5.714286 #> 2 Sg_01_02            200                45                35   6.060606 #> 3 Sg_01_03            200                86                76   8.064516 #> 4 Sg_02_01            200                10                 0   5.000000 #> 5 Sg_02_02            200                60                50   6.666667 #> 6 Sg_02_03            200                78                68   7.575758"},{"path":"https://ecologyr.github.io/BlueCarbon/reference/estimate_h.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimation of the thickness of the sample — estimate_h","title":"Estimation of the thickness of the sample — estimate_h","text":"checks space samples , , divide space previous next sample return sample thickness without gaps core","code":""},{"path":"https://ecologyr.github.io/BlueCarbon/reference/estimate_h.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimation of the thickness of the sample — estimate_h","text":"","code":"estimate_h(   df = NULL,   core = \"core\",   mind = \"mind_corrected\",   maxd = \"maxd_corrected\" )"},{"path":"https://ecologyr.github.io/BlueCarbon/reference/estimate_h.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimation of the thickness of the sample — estimate_h","text":"df data.frame columns core, mind (minimum depth sample) maxd (maximum depth sample) core Character Name column reporting core ID. mind Character Name column reporting minimum depth sample. maxd Character Name column reporting maximum depth sample.","code":""},{"path":"https://ecologyr.github.io/BlueCarbon/reference/estimate_h.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimation of the thickness of the sample — estimate_h","text":"initial data.frame three additional columns: emin (estimated minimum depth sample) emax (estimated maximum depth sample) h (estimated thickness sample)","code":""},{"path":"https://ecologyr.github.io/BlueCarbon/reference/estimate_h.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimation of the thickness of the sample — estimate_h","text":"","code":"bluecarbon_decompact <- decompact(bluecarbon_data) #> Warning: Setting compaction = 0 for these cores: Sm_03_04, Sg_10_02, Sg_11_03, Sm_05_01, Sm_06_01 out <- estimate_h(bluecarbon_decompact)"},{"path":"https://ecologyr.github.io/BlueCarbon/reference/estimate_oc.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate organic carbon content — estimate_oc","title":"Estimate organic carbon content — estimate_oc","text":"Estimate organic carbon organic matter values","code":""},{"path":"https://ecologyr.github.io/BlueCarbon/reference/estimate_oc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate organic carbon content — estimate_oc","text":"","code":"estimate_oc(   df = NULL,   core = \"core\",   site = \"site\",   ecosystem = \"ecosystem\",   species = \"species\",   om = \"om\",   oc = \"oc\" )"},{"path":"https://ecologyr.github.io/BlueCarbon/reference/estimate_oc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate organic carbon content — estimate_oc","text":"df tibble data.frame containing data. Must least five columns (see arguments ). core Character Name column id core sample belongs site Character Name column reporting sample site. ecosystem Character Name column reporting ecosystem type. apply published equations OC estimation, ecosystem names either \"Salt Marsh\", \"Seagrass\" \"Mangrove\". species Character Name column reporting main species site. om Character Name column reporting organic matter values. oc Character Name column reporting organic carbon values.","code":""},{"path":"https://ecologyr.github.io/BlueCarbon/reference/estimate_oc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate organic carbon content — estimate_oc","text":"initial tibble data.frame three new columns: one column estimated organic carbon values (eOC) % standard error prediction (eOC_se) type model used estimation (origin) addition, plot relationship organic matter estimated organic carbon values.","code":""},{"path":"https://ecologyr.github.io/BlueCarbon/reference/estimate_oc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate organic carbon content — estimate_oc","text":"Estimation organic Carbon done means linear regressions log(organic carbon) ~ log(organic matter), return estimated organic carbon value organic matter value provided. value organic carbon sample returns value; otherwise, estimates organic carbon model fitted site, model fitted species, else model fitted ecosystem. samples (<10) build reliable model model fit poor (r2 < 0.5), estimate_oc() uses equations Fourqurean et al. (2012) seagrasses, Maxwell et al. (2023) salt marshes Piñeiro-Juncal (prep.) mangroves estimate organic carbon.","code":""},{"path":"https://ecologyr.github.io/BlueCarbon/reference/estimate_oc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate organic carbon content — estimate_oc","text":"","code":"bluecarbon_decompact <- decompact(bluecarbon_data) #> Warning: Setting compaction = 0 for these cores: Sm_03_04, Sg_10_02, Sg_11_03, Sm_05_01, Sm_06_01 out <- estimate_oc(bluecarbon_decompact)  #> Warning: The following cores had samples with organic carbon values below the organic carbon range used to built the model: Sg_04_01, Sm_04_03, Sm_04_04, Sm_05_01 #> Warning: The following cores had samples with organic carbon values above the organic carbon range used to built the model: Sg_04_01, Sm_03_01, Sm_04_02, Sm_04_03, Sm_04_04, Sm_05_01 head(out$data) #>    site     core ecosystem            species compaction mind maxd       dbd #> 1 Sg_01 Sg_01_01  Seagrass Posidonia oceanica   5.714286    0    1 0.7352912 #> 2 Sg_01 Sg_01_01  Seagrass Posidonia oceanica   5.714286    1    2 0.9754336 #> 3 Sg_01 Sg_01_01  Seagrass Posidonia oceanica   5.714286    2    3 0.8698411 #> 4 Sg_01 Sg_01_01  Seagrass Posidonia oceanica   5.714286    3    4 1.0272564 #> 5 Sg_01 Sg_01_01  Seagrass Posidonia oceanica   5.714286    4    5 0.9307887 #> 6 Sg_01 Sg_01_01  Seagrass Posidonia oceanica   5.714286    5    6 1.4696196 #>         om oc age mind_corrected maxd_corrected      eoc     eoc_se #> 1 6.554329 NA   8       0.000000       1.060606 2.296034 0.04585142 #> 2       NA NA  13       1.060606       2.121212       NA         NA #> 3 7.382634 NA  15       2.121212       3.181818 2.566545 0.05166124 #> 4       NA NA  22       3.181818       4.242424       NA         NA #> 5 8.026646 NA  29       4.242424       5.303030 2.775515 0.05591166 #> 6       NA NA  35       5.303030       6.363636       NA         NA #>             origin #> 1 Model by species #> 2             <NA> #> 3 Model by species #> 4             <NA> #> 5 Model by species #> 6             <NA> out$models #> $Mangrove #> $Mangrove$ecosystem_model #> NULL #>  #> $Mangrove$multispecies_model #> NULL #>  #> $Mangrove$site_models #> NULL #>  #>  #> $`Salt Marsh` #> $`Salt Marsh`$ecosystem_model #>  #> Call: #> stats::lm(formula = log(oc_r) ~ log(om_r), data = df) #>  #> Coefficients: #> (Intercept)    log(om_r)   #>      -1.667        1.077   #>  #>  #> $`Salt Marsh`$multispecies_model #>  #> Call: #> stats::lm(formula = log(oc_r) ~ log(om_r) * species_r, data = df) #>  #> Coefficients: #>                          (Intercept)                             log(om_r)   #>                              -1.9154                                1.1678   #>           species_rSpartina maritima  log(om_r):species_rSpartina maritima   #>                               1.0662                               -0.4614   #>  #>  #> $`Salt Marsh`$site_models #> $`Salt Marsh`$site_models$Sm_01 #>  #> Call: #> stats::lm(formula = log(oc_r) ~ log(om_r), data = df) #>  #> Coefficients: #> (Intercept)    log(om_r)   #>     -0.8492       0.7064   #>  #>  #> $`Salt Marsh`$site_models$Sm_02 #>  #> Call: #> stats::lm(formula = log(oc_r) ~ log(om_r), data = df) #>  #> Coefficients: #> (Intercept)    log(om_r)   #>      -2.281        1.484   #>  #>  #> $`Salt Marsh`$site_models$Sm_03 #>  #> Call: #> stats::lm(formula = log(oc_r) ~ log(om_r), data = df) #>  #> Coefficients: #> (Intercept)    log(om_r)   #>      -1.892        1.121   #>  #>  #>  #>  #> $Seagrass #> $Seagrass$ecosystem_model #>  #> Call: #> stats::lm(formula = log(oc_r) ~ log(om_r), data = df) #>  #> Coefficients: #> (Intercept)    log(om_r)   #>      -1.463        1.278   #>  #>  #> $Seagrass$multispecies_model #>  #> Call: #> stats::lm(formula = log(oc_r) ~ log(om_r) * species_r, data = df) #>  #> Coefficients: #>                           (Intercept)                              log(om_r)   #>                               -1.5655                                 0.5137   #>           species_rPosidonia oceanica                species_rZostera noltii   #>                                0.6371                                -0.5090   #> log(om_r):species_rPosidonia oceanica      log(om_r):species_rZostera noltii   #>                                0.4222                                 1.0185   #>  #>  #> $Seagrass$site_models #> $Seagrass$site_models$Sg_01 #>  #> Call: #> stats::lm(formula = log(oc_r) ~ log(om_r), data = df) #>  #> Coefficients: #> (Intercept)    log(om_r)   #>     -0.9583       1.3323   #>  #>  #> $Seagrass$site_models$Sg_02 #>  #> Call: #> stats::lm(formula = log(oc_r) ~ log(om_r), data = df) #>  #> Coefficients: #> (Intercept)    log(om_r)   #>     -0.9599       1.2759   #>  #>  #> $Seagrass$site_models$Sg_03 #>  #> Call: #> stats::lm(formula = log(oc_r) ~ log(om_r), data = df) #>  #> Coefficients: #> (Intercept)    log(om_r)   #>      -2.861        2.589   #>  #>  #> $Seagrass$site_models$Sg_04 #>  #> Call: #> stats::lm(formula = log(oc_r) ~ log(om_r), data = df) #>  #> Coefficients: #> (Intercept)    log(om_r)   #>      -1.808        1.346   #>  #>  #> $Seagrass$site_models$Sg_05 #>  #> Call: #> stats::lm(formula = log(oc_r) ~ log(om_r), data = df) #>  #> Coefficients: #> (Intercept)    log(om_r)   #>     -1.5655       0.5137   #>  #>  #> $Seagrass$site_models$Sg_06 #>  #> Call: #> stats::lm(formula = log(oc_r) ~ log(om_r), data = df) #>  #> Coefficients: #> (Intercept)    log(om_r)   #>     -0.8815       0.8568   #>  #>  #>  #>"},{"path":"https://ecologyr.github.io/BlueCarbon/reference/estimate_oc_stock.html","id":null,"dir":"Reference","previous_headings":"","what":"Organic Carbon Stock estimation — estimate_oc_stock","title":"Organic Carbon Stock estimation — estimate_oc_stock","text":"Estimates carbon stocks soil core data specified depth, 100 cm default. core reach standardized depth, extrapolates stock linear model accumulated mass organic carbon depth.","code":""},{"path":"https://ecologyr.github.io/BlueCarbon/reference/estimate_oc_stock.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Organic Carbon Stock estimation — estimate_oc_stock","text":"","code":"estimate_oc_stock(   df = NULL,   depth = 100,   core = \"core\",   mind = \"mind_corrected\",   maxd = \"maxd_corrected\",   dbd = \"dbd\",   oc = \"eoc\" )"},{"path":"https://ecologyr.github.io/BlueCarbon/reference/estimate_oc_stock.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Organic Carbon Stock estimation — estimate_oc_stock","text":"df data.frame core (core id), mind (minimum depth sample), maxd (maximum depth sample), dbd (dry bulk density), oc (organic carbon %) depth mas depth estimate stock, default 100. core Character Name column reporting core ID. mind Character Name column reporting minimum depth sample. maxd Character Name column reporting maximum depth sample. dbd Character Name column reporting dry bulk density. oc Character Name column reporting organic carbon concentrations.","code":""},{"path":"https://ecologyr.github.io/BlueCarbon/reference/estimate_oc_stock.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Organic Carbon Stock estimation — estimate_oc_stock","text":"data.frame columns core, stockwc (organic carbon stock whole core), maxd (maximum depth core), stock (organic carbon stock standardized depth), stock_se (standard error estimated stock).","code":""},{"path":"https://ecologyr.github.io/BlueCarbon/reference/estimate_oc_stock.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Organic Carbon Stock estimation — estimate_oc_stock","text":"","code":"bluecarbon_decompact <- decompact(bluecarbon_data) #> Warning: Setting compaction = 0 for these cores: Sm_03_04, Sg_10_02, Sg_11_03, Sm_05_01, Sm_06_01  oc <- estimate_oc(bluecarbon_decompact)  #> Warning: The following cores had samples with organic carbon values below the organic carbon range used to built the model: Sg_04_01, Sm_04_03, Sm_04_04, Sm_05_01 #> Warning: The following cores had samples with organic carbon values above the organic carbon range used to built the model: Sg_04_01, Sm_03_01, Sm_04_02, Sm_04_03, Sm_04_04, Sm_05_01  out <- estimate_oc_stock(oc[[1]]) head(out) #>       core    stockwc      maxd     stock   stock_se #> 1 Sg_01_01 2.62947377 156.96970 1.8551331         NA #> 2 Sg_01_02 2.37997169  78.34839 2.9938578 0.09274054 #> 3 Sg_01_03 2.08002346  99.63509 2.1763784 0.06938244 #> 4 Sg_02_01 2.06631095 124.21053 1.6774846         NA #> 5 Sg_02_02 0.06798487  23.14286 0.3099306 0.01537332 #> 6 Sg_02_03 0.93076430  55.82951 1.6394040 0.05576503"},{"path":"https://ecologyr.github.io/BlueCarbon/reference/estimate_seq_rate.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate the average organic carbon sequestration rate — estimate_seq_rate","title":"Estimate the average organic carbon sequestration rate — estimate_seq_rate","text":"estimate average organic carbon sequestration rate soil indicated time frame (default last 100 years) organic carbon concentration ages obtained age-depth age-accumulated mass model","code":""},{"path":"https://ecologyr.github.io/BlueCarbon/reference/estimate_seq_rate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate the average organic carbon sequestration rate — estimate_seq_rate","text":"","code":"estimate_seq_rate(   df = NULL,   timeframe = 100,   core = \"core\",   mind = \"mind_corrected\",   maxd = \"maxd_corrected\",   dbd = \"dbd\",   oc = \"eoc\",   age = \"age\" )"},{"path":"https://ecologyr.github.io/BlueCarbon/reference/estimate_seq_rate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate the average organic carbon sequestration rate — estimate_seq_rate","text":"df data.frame , least, columns: core, mind (minimum depth sample), maxd (maximum depth sample), dbd (dry bulk density), oc (organic carbon %), age (age sample obtained age-depth age-accumulated mass model) timeframe standardization time frame, default 100 years core Character Name column reporting core ID. mind Character Name column reporting minimum depth sample. maxd Character Name column reporting maximum depth sample. dbd Character Name column reporting dry bulk density. oc Character Name column reporting organic carbon concentrations. age Character Name column reporting age sample.","code":""},{"path":"https://ecologyr.github.io/BlueCarbon/reference/estimate_seq_rate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate the average organic carbon sequestration rate — estimate_seq_rate","text":"data.frame columns 'core', seq_rate_wc (organic carbon sequestration rates whole core), maxage (maximum age core), seq_rate (average organic carbon sequestration rate indicated time frame)","code":""},{"path":"https://ecologyr.github.io/BlueCarbon/reference/estimate_seq_rate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate the average organic carbon sequestration rate — estimate_seq_rate","text":"","code":"bluecarbon_decompact <- decompact(bluecarbon_data) #> Warning: Setting compaction = 0 for these cores: Sm_03_04, Sg_10_02, Sg_11_03, Sm_05_01, Sm_06_01 oc <- estimate_oc(bluecarbon_decompact)  #> Warning: The following cores had samples with organic carbon values below the organic carbon range used to built the model: Sg_04_01, Sm_04_03, Sm_04_04, Sm_05_01 #> Warning: The following cores had samples with organic carbon values above the organic carbon range used to built the model: Sg_04_01, Sm_03_01, Sm_04_02, Sm_04_03, Sm_04_04, Sm_05_01 out <- estimate_seq_rate(oc[[1]]) head(out) #>       core  seq_rate_wc maxage     seq_rate #> 1 Sg_01_01 0.0020180152   1303 0.0043626875 #> 2 Sg_02_01 0.0005423388   3810 0.0027556600 #> 3 Sg_03_01 0.0001068260   1618 0.0002322665 #> 4 Sg_05_01 0.0023649409    422 0.0022770729 #> 5 Mg_01_01 0.0024467131    990 0.0040171986 #> 6 Sm_01_01 0.0009239537   1247 0.0012018703"},{"path":"https://ecologyr.github.io/BlueCarbon/reference/test_extrapolation.html","id":null,"dir":"Reference","previous_headings":"","what":"Test differences between observed and extrapolated stocks — test_extrapolation","title":"Test differences between observed and extrapolated stocks — test_extrapolation","text":"Subset cores reach standardization depth estimates stock (observed stock), estimate stock linear relation organic carbon accumulated mass depth using 90, 75, 50 25% top length indicated standardization depth. Compares observed stock estimated stocks extrapolation.","code":""},{"path":"https://ecologyr.github.io/BlueCarbon/reference/test_extrapolation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test differences between observed and extrapolated stocks — test_extrapolation","text":"","code":"test_extrapolation(   df = NULL,   depth = 100,   core = \"core\",   mind = \"mind_corrected\",   maxd = \"maxd_corrected\",   dbd = \"dbd\",   oc = \"eoc\" )"},{"path":"https://ecologyr.github.io/BlueCarbon/reference/test_extrapolation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test differences between observed and extrapolated stocks — test_extrapolation","text":"df data.frame , least, columns: core, mind (minimum depth sample), maxd (maximum depth sample), dbd (dry bulk density), oc (organic carbon %) depth Number Standardization soil depth, default 100 cm. core Character Name column reporting core ID. mind Character Name column reporting minimum depth sample. maxd Character Name column reporting maximum depth sample. dbd Character Name column reporting dry bulk density. oc Character Name column reporting organic carbon concentrations.","code":""},{"path":"https://ecologyr.github.io/BlueCarbon/reference/test_extrapolation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test differences between observed and extrapolated stocks — test_extrapolation","text":"data.frame observed extrapolated stocks. plot comparisons.","code":""},{"path":"https://ecologyr.github.io/BlueCarbon/reference/test_extrapolation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test differences between observed and extrapolated stocks — test_extrapolation","text":"","code":"bluecarbon_decompact <- decompact(bluecarbon_data) #> Warning: Setting compaction = 0 for these cores: Sm_03_04, Sg_10_02, Sg_11_03, Sm_05_01, Sm_06_01 oc <- estimate_oc(bluecarbon_decompact)  #> Warning: The following cores had samples with organic carbon values below the organic carbon range used to built the model: Sg_04_01, Sm_04_03, Sm_04_04, Sm_05_01 #> Warning: The following cores had samples with organic carbon values above the organic carbon range used to built the model: Sg_04_01, Sm_03_01, Sm_04_02, Sm_04_03, Sm_04_04, Sm_05_01 out <- test_extrapolation(oc[[1]]) #> Warning: Removed 4 rows containing non-finite outside the scale range #> (`stat_boxplot()`). #> Warning: Removed 4 rows containing missing values or values outside the scale range #> (`geom_point()`). #> Warning: Removed 1 row containing missing values or values outside the scale range #> (`geom_point()`). #> Warning: Removed 3 rows containing missing values or values outside the scale range #> (`geom_point()`)."},{"path":"https://ecologyr.github.io/BlueCarbon/news/index.html","id":"bluecarbon-001","dir":"Changelog","previous_headings":"","what":"BlueCarbon 0.0.1","title":"BlueCarbon 0.0.1","text":"First release","code":""}]
